plugins {
    id 'org.springframework.boot' version '2.6.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.google.cloud.tools.jib' version '3.1.4'
    id "de.undercouch.download" version "4.1.2"
}

apply plugin: 'java'
apply from: 'jooq.generate.gradle'

repositories {
    mavenCentral()
}

group = 'org.opendatadiscovery'
version = "${version != 'unspecified' ? version : '0.0.1-SNAPSHOT'}"

sourceCompatibility = '11'

dependencies {
    implementation platform('software.amazon.awssdk:bom:2.13.23')
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jdbc"
    implementation "org.springframework.boot:spring-boot-starter-jooq"
    implementation "org.springframework.kafka:spring-kafka"

    implementation "org.flywaydb:flyway-core:$flywayVersion"
    implementation "org.postgresql:postgresql:$postgresqlDriverVersion"

    implementation "software.amazon.awssdk:dynamodb"
    implementation 'software.amazon.awssdk:sts'

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    implementation "javax.validation:validation-api:$validationApiVersion"

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'junit', module: 'junit'
    }

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    jooqGenerationContainer("org.testcontainers:postgresql:$testContainersVersion")
}

jooq {
    basePackageName = "org.opendatadiscovery.testapp.dbmodel"
    includeMatches = ".*"
    excludes = "FLYWAY_SCHEMA_HISTORY"
    imageName = "postgres:13.2-alpine"
    inputSchema = "public"
    generate {
        daos = false
        pojos = true
        fluentSetters = true
        validationAnnotations = true
        pojosEqualsAndHashCode = true
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'build/generated-jooq/src/main/java'
        }
    }
}

task downloadOtlp(type: Download) {
    src "https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar"
    dest "${buildDir}/otlp/opentelemetry-javaagent.jar"
    overwrite true
}

jib {
    from {
        image = 'openjdk:17-alpine'
    }
    to {
        image = 'opendatadiscovery/traces-test-app'
        tags = ['latest', project.version]
    }
    extraDirectories {
        paths {
            path {
                // copies the contents of 'src/main/another/dir' into '/extras' on the container
                from = file('build/otlp/')
                into = '/app/otlp/'
            }
        }
    }
    container {
        creationTime = 'USE_CURRENT_TIMESTAMP'
        appRoot = '/app'
        jvmFlags = ['-Xms1G', '-Xmx1G', '-javaagent:/app/otlp/opentelemetry-javaagent.jar']
        ports = ['8080']
        workingDirectory = '/app'
    }
    allowInsecureRegistries = false
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
}

compileJava.dependsOn tasks.jooqDockerGenerate
jibDockerBuild.dependsOn tasks.downloadOtlp